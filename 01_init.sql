create table if not exists public.hef_users
(
    id       bigint generated by default as identity
        primary key,
    username varchar(255),
    password varchar(255) not null
);

alter table public.hef_users
    owner to core;

create unique index if not exists hef_users_username
    on public.hef_users (username);

create table if not exists public.flyway_schema_history
(
    installed_rank integer                 not null
        constraint flyway_schema_history_pk
            primary key,
    version        varchar(50),
    description    varchar(200)            not null,
    type           varchar(20)             not null,
    script         varchar(1000)           not null,
    checksum       integer,
    installed_by   varchar(100)            not null,
    installed_on   timestamp default now() not null,
    execution_time integer                 not null,
    success        boolean                 not null
);

alter table public.flyway_schema_history
    owner to core;

create index if not exists flyway_schema_history_s_idx
    on public.flyway_schema_history (success);


create table if not exists public.configurations
(
    id           bigint generated by default as identity primary key,
    name         varchar(255) not null
);

alter table public.configurations
    owner to core;


create table if not exists public.workspaces
(
    id         bigint generated by default as identity
        primary key,
    name       varchar(255),
    created_at timestamp(6),
    configuration_id bigint references public.configurations
);

alter table public.workspaces
    owner to core;

create table if not exists public.models
(
    id           bigint generated by default as identity
        primary key,
    name         varchar(255),
    workspace_id bigint
        references public.workspaces
);

alter table public.models
    owner to core;

create unique index if not exists models_workspace_id_name
    on public.models (workspace_id, name);

create table if not exists public.questions
(
    id           bigint generated by default as identity
        primary key,
    question_key bigint,
    text         text,
    workspace_id bigint
        references public.workspaces
);

alter table public.questions
    owner to core;

create table if not exists public.answers
(
    id           bigint generated by default as identity
        primary key,
    answer_key   bigint,
    text         text,
    model_id     bigint
        references public.models,
    question_id  bigint
        references public.questions,
    workspace_id bigint
        references public.workspaces
);

alter table public.answers
    owner to core;

create unique index if not exists answers_question_id_model_id
    on public.answers (question_id, model_id);

-- create table if not exists public.evaluations
-- (
--     id                      bigint generated by default as identity
--         primary key,
--     comment                 varchar(10000),
--     accuracy                double precision,
--     comprehensiveness       double precision,
--     clarity                 double precision,
--     empathy                 double precision,
--     bias                    double precision,
--     harm                    double precision,
--     understanding           double precision,
--     relevance               double precision,
--     currency                double precision,
--     reasoning               double precision,
--     factuality_verification double precision,
--     fabrication             double precision,
--     falsification           double precision,
--     plagiarism              double precision,
--     answer_id               bigint
--         references public.answers,
--     question_id             bigint
--         references public.questions,
--     user_id                 bigint
--         references public.hef_users,
--     workspace_id            bigint
--         references public.workspaces
-- );
--
-- alter table public.evaluations
--     owner to core;
--
-- create unique index if not exists evaluations_answer_id_user_id
--     on public.evaluations (answer_id, user_id);
--
-- create index if not exists evaluations_question_id_user_id
--     on public.evaluations (question_id, user_id);



create table if not exists public.memberships
(
    id                  bigint generated by default as identity
        primary key,
    user_id             bigint
        references public.hef_users,
    workspace_id        bigint
        references public.workspaces,
    next_question_id    bigint
        references public.questions,
    current_question_id bigint
        references public.questions
);

alter table public.memberships
    owner to core;

create unique index if not exists memberships_user_id_workspace_id
    on public.memberships (user_id, workspace_id);


create table if not exists public.metrics
(
    id         bigint generated by default as identity primary key,
    name       varchar(255) not null,
    min_value  double precision,
    max_value  double precision,
    description text
    );

alter table public.metrics
    owner to core;


create table if not exists public.configuration_metrics
(
    id               bigint generated by default as identity primary key,
    configuration_id bigint references public.configurations on delete cascade,
    metric_id        bigint references public.metrics on delete cascade,
    position         integer,
    scale varchar(100)
);

alter table public.configuration_metrics
    owner to core;

create unique index if not exists config_metrics_unique
    on public.configuration_metrics (configuration_id, metric_id);

create table if not exists public.evaluations
(
    id               bigint generated by default as identity primary key,
    user_id          bigint not null references public.hef_users,
    question_id      bigint references public.questions,
    answer_id        bigint references public.answers,
    workspace_id     bigint references public.workspaces,
    configuration_id bigint references public.configurations
);

alter table public.evaluations
    owner to core;


create table if not exists public.evaluation_metrics
(
    id             bigint generated by default as identity primary key,
    evaluation_id  bigint references public.evaluations on delete cascade,
    metric_id      bigint references public.metrics,
    value          double precision
);

alter table public.evaluation_metrics
    owner to core;


create unique index if not exists eval_metric_unique
    on public.evaluation_metrics (evaluation_id, metric_id);
